import random
import os

# Classe que representa uma empresa (jogador)
class Empresa:
    def __init__(self, nome):
        self.nome = nome
        self.saldo = 1000.0  # Saldo inicial de R$ 1.000,00

    def investir(self, marketing, pd, producao, multiplicadores):
        # C√°lculo dos retornos com base nos multiplicadores do cen√°rio (oculto para os jogadores)
        retorno_marketing = marketing * multiplicadores['marketing']
        retorno_pd = pd * multiplicadores['pd']
        retorno_producao = producao * multiplicadores['producao']
        
        # O saldo √© atualizado com o retorno dos investimentos
        self.saldo += retorno_marketing + retorno_pd + retorno_producao

# Fun√ß√£o que cria um cen√°rio aleat√≥rio para cada rodada
def gerar_cenario():
    cenarios = [
        {"descricao": "A demanda do mercado aumentou. Produzir mais parece ser uma boa op√ß√£o.", "marketing": 1.2, "pd": 1.1, "producao": 1.5},
        {"descricao": "A concorr√™ncia est√° feroz! Talvez seja a hora de investir em Marketing.", "marketing": 1.5, "pd": 1.1, "producao": 1.0},
        {"descricao": "O mercado est√° saturado. Inovar pode ser a √∫nica sa√≠da.", "marketing": 1.0, "pd": 1.6, "producao": 1.2},
        {"descricao": "Custos de produ√ß√£o est√£o subindo. Cuidados com excesso de produ√ß√£o.", "marketing": 1.3, "pd": 1.0, "producao": 0.8},
        {"descricao": "O setor de tecnologia est√° aquecido! Investimentos em P&D podem dar uma vantagem competitiva.", "marketing": 1.0, "pd": 1.8, "producao": 1.1},
        {"descricao": "Uma nova rede social viralizou, oferecendo oportunidades de Marketing digital.", "marketing": 1.7, "pd": 1.1, "producao": 1.0},
        {"descricao": "Um novo concorrente entrou no mercado com um produto inovador.", "marketing": 1.3, "pd": 1.5, "producao": 1.0},
        {"descricao": "Houve uma queda nas taxas de juros, facilitando empr√©stimos para expans√£o de produ√ß√£o.", "marketing": 1.0, "pd": 1.2, "producao": 1.7},
        {"descricao": "Uma mudan√ßa regulat√≥ria imp√¥s novas regras para publicidade.", "marketing": 0.9, "pd": 1.2, "producao": 1.1},
        {"descricao": "A demanda por produtos sustent√°veis est√° em alta, impulsionando a inova√ß√£o em P&D.", "marketing": 1.1, "pd": 1.7, "producao": 1.0},
        {"descricao": "Um aumento inesperado de infla√ß√£o afetou os custos de produ√ß√£o.", "marketing": 1.0, "pd": 1.0, "producao": 0.7},
        {"descricao": "O pa√≠s est√° em recess√£o, consumidores est√£o cautelosos, e estrat√©gias de Marketing precisam ser agressivas.", "marketing": 1.8, "pd": 1.2, "producao": 0.9},
        {"descricao": "Novas tecnologias de automa√ß√£o reduziram custos de produ√ß√£o.", "marketing": 1.0, "pd": 1.5, "producao": 1.6},
        {"descricao": "A m√≠dia social passou por uma mudan√ßa nas regras de publicidade, impactando campanhas de Marketing.", "marketing": 0.8, "pd": 1.4, "producao": 1.2},
        {"descricao": "A percep√ß√£o do consumidor sobre qualidade aumentou. Investimentos em P&D se tornam cr√≠ticos.", "marketing": 1.1, "pd": 1.8, "producao": 1.1},
        {"descricao": "Um aumento no pre√ßo dos materiais causou um impacto nos custos de produ√ß√£o.", "marketing": 1.2, "pd": 1.0, "producao": 0.8},
        {"descricao": "A tend√™ncia de 'boicotes sociais' contra empresas cresceu, e as marcas precisam melhorar sua imagem p√∫blica.", "marketing": 1.6, "pd": 1.0, "producao": 1.1},
        {"descricao": "Uma inova√ß√£o revolucion√°ria foi introduzida no mercado, mudando completamente o setor.", "marketing": 1.1, "pd": 1.9, "producao": 1.3},
        {"descricao": "O setor de e-commerce est√° crescendo rapidamente, criando novas oportunidades para Marketing digital.", "marketing": 1.7, "pd": 1.3, "producao": 1.0},
        {"descricao": "Mudan√ßas clim√°ticas est√£o afetando a cadeia de suprimentos e a produ√ß√£o, exigindo inova√ß√£o.", "marketing": 1.2, "pd": 1.6, "producao": 0.9},
        {"descricao": "Houve um crescimento explosivo nas plataformas de streaming, oferecendo novas op√ß√µes para publicidade digital.", "marketing": 1.6, "pd": 1.2, "producao": 1.0},
        {"descricao": "Houve uma queda nos pre√ßos de energia, o que reduz os custos de produ√ß√£o.", "marketing": 1.0, "pd": 1.0, "producao": 1.8},
        {"descricao": "O governo anunciou novos subs√≠dios para empresas que investem em pesquisa e desenvolvimento.", "marketing": 1.0, "pd": 2.0, "producao": 1.2},
        {"descricao": "Uma crise de confian√ßa abalou o mercado, e as empresas precisam se reposicionar no Marketing.", "marketing": 1.8, "pd": 1.3, "producao": 1.0}
    ]
    return random.choice(cenarios)

# Fun√ß√£o para exibir o ranking das empresas
def exibir_ranking(empresas):
    empresas_ordenadas = sorted(empresas, key=lambda x: x.saldo, reverse=True)
    print("\n" + "‚ïê" * 50)
    print("üèÜ  RANKING DAS EMPRESAS  üèÜ".center(50))
    print("‚ïê" * 50)
    for i, empresa in enumerate(empresas_ordenadas, start=1):
        print(f"{i}. {empresa.nome:<20} - Saldo: R${empresa.saldo:,.2f}")
    print("‚ïê" * 50)

# Fun√ß√£o para limpar a tela
def limpar_tela():
    os.system('cls' if os.name == 'nt' else 'clear')

# Fun√ß√£o que exibe a tela inicial
def tela_inicial():
    limpar_tela()
    print("‚ïê" * 50)
    print(" üìä BEM-VINDO AO DESAFIO DAS EMPRESAS üìä".center(50))
    print("‚ïê" * 50)
    print("üìå COMO FUNCIONA O JOGO:")
    print("Voc√™ √© o CEO de uma empresa em um mercado altamente competitivo.")
    print("A cada rodada, voc√™ far√° decis√µes estrat√©gicas sobre onde investir seu or√ßamento.")
    print("\n√Åreas de investimento dispon√≠veis:")
    print("  ‚û§ Marketing: Aumenta a visibilidade da empresa.")
    print("  ‚û§ Pesquisa e Desenvolvimento (P&D): Gera inova√ß√£o e novos produtos.")
    print("  ‚û§ Produ√ß√£o: Aumenta a capacidade produtiva para atender a demanda.")
    print("‚ïê" * 50)
    input("Pressione Enter para iniciar o jogo...")

# Fun√ß√£o principal do jogo
def jogo():
    tela_inicial()
    
    # Perguntar o n√∫mero de jogadores e rodadas
    num_jogadores = int(input("\nQuantos jogadores ir√£o participar (m√°x. 10)? "))
    num_rodadas = int(input("Quantas rodadas ter√° o jogo (m√°x. 10)? "))
    
    # Criar as empresas (jogadores)
    empresas = []
    for i in range(num_jogadores):
        nome_empresa = input(f"Nome da empresa do Jogador {i+1}: ")
        empresas.append(Empresa(nome_empresa))

    # Rodar o jogo por cada rodada
    for rodada in range(1, num_rodadas + 1):
        limpar_tela()

        # Exibir o ranking fixo no in√≠cio de cada rodada
        exibir_ranking(empresas)

        print(f"\n{rodada}¬™ RODADA".center(10, "="))
        
        # Gerar cen√°rio aleat√≥rio
        cenario = gerar_cenario()
        print(f"Cen√°rio: {cenario['descricao']}")
        print("=" * 50)
        
        # Para cada jogador, solicitar os investimentos
        for empresa in empresas:
            print(f"\n{empresa.nome}, fa√ßa suas escolhas de investimento:")
            print(f"Saldo dispon√≠vel: R${empresa.saldo:.2f}")
            
            # Solicitar os investimentos
            try:
                marketing = float(input("Investimento em Marketing (R$): "))
                pd = float(input("Investimento em P&D (R$): "))
                producao = float(input("Investimento em Produ√ß√£o (R$): "))
            except ValueError:
                print("‚ö†Ô∏è Valor inv√°lido! Tente novamente.")
                continue
            
            # Verificar se os investimentos n√£o ultrapassam o saldo
            total_investido = marketing + pd + producao
            if total_investido > empresa.saldo:
                print("‚ùå Investimento maior que o saldo dispon√≠vel. Tente novamente.")
                continue

            # Atualizar saldo com os retornos (sem mostrar os multiplicadores)
            empresa.investir(marketing, pd, producao, cenario)

        # Exibir ranking ao final da rodada (fixo no in√≠cio da pr√≥xima)
        print("\nRodada conclu√≠da! Pressione Enter para ver o ranking atualizado...")
        input()

    # Exibir o vencedor ao final do jogo
    limpar_tela()
    exibir_ranking(empresas)
    vencedor = max(empresas, key=lambda x: x.saldo)
    print(f"\nüéâ A empresa vencedora √©: {vencedor.nome} com um saldo final de R${vencedor.saldo:.2f}!")
    print("=" * 50)

# Executar o jogo
if __name__ == "__main__":
    jogo()