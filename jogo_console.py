import random
import time
import sys
import os

# Fun√ß√£o para limpar a tela
def limpar_tela():
    os.system('cls' if os.name == 'nt' else 'clear')

# Definir a classe Empresa
class Empresa:
    def __init__(self, nome, orcamento_inicial=100):
        self.nome = nome
        self.faturamento = 100  # Faturamento inicial
        self.custos = 50  # Custos iniciais
        self.orcamento = orcamento_inicial  # Or√ßamento inicial
        self.investimento_marketing = 0
        self.investimento_pd = 0
        self.investimento_novos_produtos = 0
    
    def tomar_decisao(self):
        print(f"\nüíº Decis√µes da Empresa {self.nome} (Or√ßamento restante: R${self.orcamento:.2f}):")
        self.investimento_marketing = int(input("Quanto investir em marketing? "))
        self.investimento_pd = int(input("Quanto investir em P&D? "))
        self.investimento_novos_produtos = int(input("Quanto investir em novos produtos? "))
        
        total_investido = self.investimento_marketing + self.investimento_pd + self.investimento_novos_produtos
        if total_investido > self.orcamento:
            print("‚ùå Investimento excede o or√ßamento dispon√≠vel! Tente novamente.")
            self.tomar_decisao()
        else:
            self.orcamento -= total_investido

    def calcular_resultados(self, evento_mercado):
        impacto_evento = evento_mercado['impacto']
        
        # L√≥gica para calcular o crescimento com base no evento
        if evento_mercado['nome'] == "Mudan√ßa nas prefer√™ncias do consumidor":
            crescimento = (self.investimento_novos_produtos * 0.3) + (self.investimento_pd * 0.1) - (self.custos * 0.1)
        
        elif evento_mercado['nome'] == "Nova regulamenta√ß√£o":
            crescimento = (self.investimento_pd * 0.4) + (self.investimento_marketing * 0.1) - (self.custos * 0.1)
        
        elif evento_mercado['nome'] == "Crise econ√¥mica":
            crescimento = (self.investimento_marketing * 0.05) + (self.investimento_novos_produtos * 0.1) - (self.custos * 0.2)
        
        elif evento_mercado['nome'] == "Concorr√™ncia intensa":
            crescimento = (self.investimento_marketing * 0.3) + (self.investimento_novos_produtos * 0.1) - (self.custos * 0.1)
        
        elif evento_mercado['nome'] == "Inova√ß√£o tecnol√≥gica":
            crescimento = (self.investimento_novos_produtos * 0.2) + (self.investimento_pd * 0.3) - (self.custos * 0.1)
        
        # Adicionando o impacto do evento
        crescimento += impacto_evento
        
        # Ajuste de custos com base em investimentos em P&D
        if self.investimento_pd > 20:
            self.custos -= self.investimento_pd * 0.05
        
        # Atualiza o faturamento
        self.faturamento += crescimento

        # Atualiza o or√ßamento com base no desempenho
        self.orcamento += crescimento

    def valor_empresa(self):
        # O valor da empresa √© baseado no or√ßamento restante
        return self.orcamento

# Fun√ß√£o para gerar eventos de mercado e cen√°rios relacionados
def gerar_evento_e_cenario():
    eventos = [
        {"nome": "Mudan√ßa nas prefer√™ncias do consumidor", "impacto": random.uniform(-10, 10),
         "cenario": "Os consumidores est√£o mudando seus h√°bitos de compra, preferindo produtos mais sustent√°veis e inovadores."},
        {"nome": "Nova regulamenta√ß√£o", "impacto": random.uniform(-5, 5),
         "cenario": "O governo introduziu novas regulamenta√ß√µes que afetam diretamente a produ√ß√£o e o custo de opera√ß√µes das empresas."},
        {"nome": "Crise econ√¥mica", "impacto": random.uniform(-20, -5),
         "cenario": "A economia global est√° enfrentando uma desacelera√ß√£o significativa, e o poder de compra dos consumidores est√° em queda."},
        {"nome": "Concorr√™ncia intensa", "impacto": random.uniform(-15, 0),
         "cenario": "Novos concorrentes entraram no mercado, com ofertas agressivas e inova√ß√£o tecnol√≥gica, desafiando sua posi√ß√£o de mercado."},
        {"nome": "Inova√ß√£o tecnol√≥gica", "impacto": random.uniform(5, 15),
         "cenario": "Uma nova tecnologia disruptiva est√° revolucionando o setor, abrindo oportunidades para empresas que investirem rapidamente."},
    ]
    return random.choice(eventos)

# Fun√ß√£o para revelar os rankings com efeito de digita√ß√£o
def revelar_resultados(empresas):
    print("\nüîç CALCULANDO OS RESULTADOS", end="")
    for _ in range(3):
        time.sleep(0.5)
        print(".", end="")
        sys.stdout.flush()
    time.sleep(1)
    
    print("\n=== üèÜ RANKING DAS EMPRESAS ===")
    # Ordenar empresas pelo valor total
    empresas.sort(key=lambda e: e.valor_empresa(), reverse=True)
    
    for i, empresa in enumerate(empresas, 1):
        for char in f"{i}. {empresa.nome} - Valor da Empresa: R${empresa.valor_empresa():.2f}\n":
            sys.stdout.write(char)
            sys.stdout.flush()
            time.sleep(0.03)
        time.sleep(0.3)

# Fun√ß√£o para exibir o cen√°rio fixo e ranking a cada rodada
def exibir_ranking_fixo(empresas):
    limpar_tela()
    print("\n=== üèÜ RANKING ATUAL DAS EMPRESAS ===")
    # Ordenar empresas pelo valor total
    empresas.sort(key=lambda e: e.valor_empresa(), reverse=True)
    
    for i, empresa in enumerate(empresas, 1):
        print(f"{i}. {empresa.nome} - Valor da Empresa: R${empresa.valor_empresa():.2f}")

# Fun√ß√£o para destacar o vencedor
def destacar_vencedor(empresa):
    print("\n*** üéâ PARAB√âNS! ***")
    for char in f"A empresa vencedora √© {empresa.nome}, com um Valor da Empresa de R${empresa.valor_empresa():.2f}!\n":
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(0.05)

# Fun√ß√£o para apresentar o jogo com introdu√ß√£o e regras
def apresentar_jogo():
    print("""
    === üìä BEM-VINDO AO DESAFIO DAS EMPRESAS ===
    
    Cen√°rio: Voc√™ √© o CEO de uma empresa em um mercado altamente competitivo e din√¢mico. A cada rodada, voc√™ tomar√° decis√µes estrat√©gicas sobre como investir seu or√ßamento nas seguintes √°reas:

    1. **Marketing**: Investir em marketing aumenta a visibilidade da sua empresa e pode atrair mais clientes. Quanto mais voc√™ investir, maior ser√° o impacto no seu faturamento, especialmente se o mercado estiver receptivo √†s suas campanhas.
    
    2. **Pesquisa e Desenvolvimento (P&D)**: Investimentos em P&D podem resultar em inova√ß√µes que melhoram seus produtos ou criam novos produtos. Isso pode levar a um aumento significativo no faturamento a longo prazo, mas geralmente exige um investimento inicial alto e pode n√£o gerar resultados imediatos.
    
    3. **Novos Produtos**: Lan√ßar novos produtos pode abrir novas oportunidades de mercado e atrair diferentes segmentos de consumidores. Esse tipo de investimento pode ter um retorno r√°pido se a demanda for alta, mas tamb√©m pode acarretar riscos se os novos produtos n√£o atenderem √†s expectativas do mercado.

    Objetivo: O objetivo √© maximizar o valor da sua empresa, que √© o or√ßamento restante dispon√≠vel. O mercado enfrentar√° eventos inesperados a cada rodada, como crises econ√¥micas, mudan√ßas tecnol√≥gicas e novas regulamenta√ß√µes, que afetar√£o o desempenho de todas as empresas.
    
    Como jogar:
    - A cada rodada, voc√™ ter√° um or√ßamento dispon√≠vel para investir.
    - Tome decis√µes de investimento em tr√™s √°reas: marketing, P&D e novos produtos.
    - Ajuste suas decis√µes com base nos eventos de mercado e na sua estrat√©gia.
    - A empresa com o maior Valor da Empresa no final do jogo ser√° a vencedora.
    
    Prepare-se, pois cada decis√£o conta!
    """)
    input("Pressione ENTER para come√ßar o jogo...")

# Fun√ß√£o principal do jogo
def jogar(num_rodadas):
    limpar_tela()
    apresentar_jogo()

    num_jogadores = int(input("Quantos jogadores ir√£o participar? (M√°ximo 10): "))
    empresas = []

    # Criar as empresas
    for i in range(num_jogadores):
        nome = input(f"Nome da Empresa {i+1}: ")
        empresas.append(Empresa(nome))
    
    for rodada in range(1, num_rodadas + 1):
        exibir_ranking_fixo(empresas)
        print(f"=== üìä Rodada {rodada} ===")
        
        # Gerar evento e cen√°rio relacionados
        evento = gerar_evento_e_cenario()
        print(f"\n‚ö†Ô∏è Cen√°rio: {evento['cenario']}")
        print(f"‚ö†Ô∏è Evento de Mercado: {evento['nome']} com impacto de {evento['impacto']:.2f}")
        
        # Jogadores tomam decis√µes
        for empresa in empresas:
            empresa.tomar_decisao()
        
        # Calcular resultados
        for empresa in empresas:
            empresa.calcular_resultados(evento)

        # Revelar ranking da rodada com efeito
        revelar_resultados(empresas)
    
    # Destacar o vencedor
    empresas.sort(key=lambda x: x.valor_empresa(), reverse=True)
    destacar_vencedor(empresas[0])

# Iniciar o jogo com 10 rodadas
jogar(10)
